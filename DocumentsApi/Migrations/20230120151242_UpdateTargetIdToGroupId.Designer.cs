// <auto-generated />
using System;
using DocumentsApi.V1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DocumentsApi.Migrations
{
    [DbContext(typeof(DocumentsContext))]
    [Migration("20230120151242_UpdateTargetIdToGroupId")]
    partial class UpdateTargetIdToGroupId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DocumentsApi.V1.Infrastructure.ClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ApiCreatedBy")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("api_created_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("uuid")
                        .HasColumnName("document_id");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("RetentionExpiresAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("retention_expires_at");

                    b.Property<string>("ServiceAreaCreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("service_area_created_by");

                    b.Property<string>("TargetType")
                        .HasColumnType("text")
                        .HasColumnName("target_type");

                    b.Property<string>("UserCreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("user_created_by");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("valid_until");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("claims");
                });

            modelBuilder.Entity("DocumentsApi.V1.Infrastructure.DocumentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size");

                    b.Property<string>("FileType")
                        .HasColumnType("text")
                        .HasColumnName("file_type");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UploadedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("uploaded_at");

                    b.HasKey("Id");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("DocumentsApi.V1.Infrastructure.ClaimEntity", b =>
                {
                    b.HasOne("DocumentsApi.V1.Infrastructure.DocumentEntity", "Document")
                        .WithMany("Claims")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("DocumentsApi.V1.Infrastructure.DocumentEntity", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
