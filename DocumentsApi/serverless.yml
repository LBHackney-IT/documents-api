service: documents-api
provider:
  name: aws
  runtime: dotnetcore3.1
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2
  usagePlan:
    - secureAccess:
        throttle:
          burstLimit: 200
          rateLimit: 100
  timeout: 30
  tracing:
    apiGateway: true
    lambda: true
  environment:
    CONNECTION_STRING: Host=${ssm:/documents-api/${self:provider.stage}/postgres-hostname};Port=${ssm:/documents-api/${self:provider.stage}/postgres-port};Database=${ssm:/documents-api/${self:provider.stage}/postgres-database};Username=${ssm:/documents-api/${self:provider.stage}/postgres-username};Password=${ssm:/documents-api/${self:provider.stage}/postgres-password~true}
    BUCKET_NAME: document-evidence-store-${self:provider.stage}-bucket
  s3:
    documentsBucket:
      accessControl: Private
      name: ${self:provider.environment.BUCKET_NAME}
      bucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      publicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      corsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
              - POST
            AllowedOrigins: ${self:custom.corsDomains.${self:provider.stage}}

package:
  artifact: ./bin/release/netcoreapp3.1/documents-api.zip
  individually: true

functions:
  DocumentsApi:
    name: ${self:service}
    handler: DocumentsApi::DocumentsApi.LambdaEntryPoint::FunctionHandlerAsync
    role: lambdaExecutionRole
    package:
      artifact: ./bin/release/netcoreapp3.1/documents-api.zip
    layers:
      - arn:aws:lambda:${self:provider.region}:553035198032:layer:nodejs12:38
    events:
      - http:
          path: /{proxy+}
          method: ANY
          authorizer:
            arn: ${ssm:/platform-apis-lambda-authorizer-arn}
            type: request
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            managedExternally: true
  DocumentsMalwareScanSuccessfulFunction:
    name: ${self:service}-malware-scan-successful
    handler: DocumentsApi::DocumentsApi.S3EntryPoint::DocumentCreated
    role: lambdaExecutionRole
    package:
      artifact: ./bin/release/netcoreapp3.1/documents-api.zip
  DocumentsOrchestrator:
    runtime: python3.8
    name: ${self:service}-documents-orchestrator
    handler: lambda-orchestrator.lambda_handler
    package:
      artifact: lambda-orchestrator.zip
    role: lambdaExecutionRole
    events:
      - s3:
          bucket: documentsBucket
          event: s3:ObjectCreated:*
          rules:
            - prefix: pre-scan/

resources:
  Resources:
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
                - Effect: "Allow"
                  Action:
                    - "s3:PutObject"
                    - "s3:GetObject"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:s3:::"
                        - "Ref": "ServerlessDeploymentBucket"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: documentsBucketAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                  - s3:PutObject
                  - s3:PutObjectTagging
                  - s3:DeleteObject
                Effect: "Allow"
                Resource:
                  - "arn:aws:s3:::${self:provider.environment.BUCKET_NAME}/*"

custom:
  corsDomains:
    staging:
      - "https://*.hackney.gov.uk"
    production:
      - "https://*.hackney.gov.uk"
  vpc:
    staging:
      securityGroupIds:
        - sg-072d99bc766f115b9
      subnetIds:
        - subnet-0aa5f484db1aa801c
        - subnet-012870b02db9a3bf8
    production:
      securityGroupIds:
        - sg-0c5a580a550bf3a3f
      subnetIds:
        - subnet-0a00b445652b2d8e8
        - subnet-0c31b6c3961a84548
